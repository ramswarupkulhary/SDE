//Next Permutation

int getNextLarger(vector<int> nums, int start, int end, int key)
    {
        int result = end;
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            if(nums[mid] > key)
            {
                result = mid;
                start = mid+1;
            }
            else
                end = mid - 1;;
        }
        return result;
    }
    void nextPermutation(vector<int>& nums) {
        
        int i = 0;
        for(i = 1; i < nums.size(); i++)
        {
            if(nums[i] <= nums[i-1])
                continue;
            else
                break;
        }
        if(i == nums.size())
        {
            reverse(nums.begin(), nums.end());
            return;
        }
        i = nums.size() - 2;
        while(i >= 0 && nums[i] >= nums[i+1])
            i--;
        int nextLarger = getNextLarger(nums, i+1, nums.size()-1, nums[i]);
        swap(nums[i], nums[nextLarger]);
        reverse(nums.begin()+i+1, nums.end());
    }









 {
    int t;
   cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        long long arr[n];
        for(int i = 0; i < n; i++)
            cin>>arr[i];
        long long res[n];
        stack<long long> s;
        for(int i = n-1; i >= 0; i--)
        {
            if(s.empty())
                res[i] = -1;
            else
            {
                while(!s.empty() && s.top() <= arr[i])
                    s.pop();
                if(s.empty())
                    res[i] =  -1;
                else
                    res[i] = s.top();
            }
            s.push(arr[i]);
        }
        for(int i = 0; i < n; i++)
            cout<<res[i]<<" ";
        cout<<"\n";
            
    }
	return 0;
}