//Inversion of array

#include<bits/stdc++.h>
using namespace std;
long long merge(long long arr[], long long temp[], long long left, long long mid, long long right)
{
    long long i, j, k; 
    long long inv_count = 0; 
  
    i = left;
    j = mid;
    k = left;
    while ((i <= mid - 1) && (j <= right)) { 
        if (arr[i] <= arr[j]) { 
            temp[k++] = arr[i++]; 
        } 
        else { 
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i); 
        } 
    } 
    while (i <= mid - 1) 
        temp[k++] = arr[i++]; 
    while (j <= right) 
        temp[k++] = arr[j++];
    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 
    return inv_count; 
}
long long mergesort(long long arr[], long long temp[], long long start, long long end)
{
    long long mid, res = 0; 
    if (end > start) {
        mid = (end + start) / 2;
        res += mergesort(arr, temp, start, mid); 
        res += mergesort(arr, temp, mid + 1, end);
        res += merge(arr, temp, start, mid+1, end); 
    } 
    return res; 
}
void solve(long long arr[], long long n)
{
    long long temp[n];
    cout<<mergesort(arr, temp, 0, n-1);
}
int main()
 {
    long long t;
   cin>>t;
    while(t--)
    {
        long long n;
        cin>>n;
        long long arr[n];
        for(long long i = 0; i < n; i++)
            cin>>arr[i];
        solve(arr, n);
        cout<<endl;
    }
	return 0;
}